<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Aventurier de Mirval ‚Äî JDR interactif</title>
<meta name="theme-color" content="#0e0f13" />
<link rel="manifest" href="./manifest.webmanifest">
<link rel="apple-touch-icon" href="./icons/icon-192.png">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

<style>
  :root{
    --bg:#0e0f13; --panel:#171923; --accent:#6ee7b7; --muted:#9aa3b2; --danger:#ef4444; --warn:#f59e0b;
    --ok:#22c55e; --text:#e5e7eb; --btn:#1f2937; --btn-hover:#273244; --card:#11131a;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{
    margin:0; font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,"Noto Sans",Arial,"Apple Color Emoji","Segoe UI Emoji";
    background:radial-gradient(1200px 600px at 70% -10%, #1d2330 0, #10131a 60%, #0a0b0f 100%) fixed;
    color:var(--text); line-height:1.45;
  }
  .wrap{max-width:980px;margin:0 auto;padding:20px}
  header{display:flex;align-items:center;justify-content:space-between;gap:12px;margin-bottom:14px}
  h1{font-size:clamp(1.2rem,2.2vw,1.8rem);margin:0}
  .badge{font-size:12px;padding:3px 8px;border-radius:999px;background:#0b1220;border:1px solid #1f2a3a;color:var(--muted)}
  .grid{display:grid;grid-template-columns:260px 1fr;gap:16px}
  @media (max-width:820px){.grid{grid-template-columns:1fr}}
  .panel{background:linear-gradient(180deg,#151826,#0f1320); border:1px solid #273244; border-radius:14px; padding:14px; box-shadow:0 10px 30px rgba(0,0,0,.35), inset 0 1px 0 rgba(255,255,255,.04)}
  .stat{display:grid; grid-template-columns:1fr auto; gap:6px; align-items:center; margin:6px 0; padding:6px 10px; border-radius:10px; background:linear-gradient(180deg,#111422,#0c101b); border:1px solid #222a3a}
  .stat b{letter-spacing:.3px}
  .bar{height:8px;background:#0b0e15;border-radius:999px;overflow:hidden;border:1px solid #2a3448}
  .bar>i{display:block;height:100%;background:linear-gradient(90deg,#60a5fa,#34d399);width:50%}
  .chips{display:flex;flex-wrap:wrap;gap:8px}
  .chip{background:#0f1422;border:1px solid #22304a;color:#b9c2d0;border-radius:999px;padding:5px 9px;font-size:12px}
  .inv{display:grid;grid-template-columns:1fr 1fr;gap:8px}
  .log{height:240px; overflow:auto; background:linear-gradient(180deg,#0d111b,#0a0f18); border:1px solid #213049; border-radius:12px; padding:10px; font-size:14px}
  .log p{margin:0 0 8px}
  .log .sys{color:#9aa3b2}
  .log .good{color:var(--ok)}
  .log .bad{color:var(--danger)}
  .log .warn{color:var(--warn)}
  .title{display:flex;align-items:center;gap:10px}
  .title h2{margin:0;font-size:1.05rem}
  .choices{display:grid;gap:10px;margin-top:10px}
  button{appearance:none;border:0;background:var(--btn);color:#e7ecf5;padding:12px 16px;border-radius:10px;cursor:pointer;border:1px solid #2c3a54; transition:transform .05s ease, background .12s ease, border-color .12s ease; text-align:left; font-size:16px}
  button:hover{background:var(--btn-hover);border-color:#3a4a68}
  button:active{transform:translateY(1px)}
  .btn-row{display:flex;gap:8px;flex-wrap:wrap}
  .btn-primary{background:#1c2a3d;border-color:#3a4a68}
  .btn-danger{background:#3a1f22;border-color:#6b2d33}
  .btn-ghost{background:transparent;border-color:#334155}
  .meta{color:var(--muted);font-size:12px}
  .footer{margin-top:16px;display:flex;justify-content:space-between;gap:10px;flex-wrap:wrap;color:#9aa3b2;font-size:12px}
  .divider{height:1px;background:#243044;margin:10px 0}
  .highlight{color:var(--accent)}
</style>
</head>
<body>
  <div class="wrap">
    <header>
      <h1>üó°Ô∏è Aventurier de Mirval</h1>
      <span class="badge">JDR solo ‚Äî choix & d√©s üé≤</span>
    </header>

    <div class="grid">
      <aside class="panel">
        <div class="title"><h2>Personnage</h2><span class="meta" id="seedInfo"></span></div>
        <div class="stat"><b>Nom</b><span id="p-name">Eldarion</span></div>
        <div class="stat">
          <b>Vie</b><span><span id="hp">20</span>/<span id="hpmax">20</span></span>
          <div class="bar" style="grid-column:1 / -1;"><i id="hpbar" style="width:100%"></i></div>
        </div>
        <div class="stat"><b>Or</b><span id="gold">10</span></div>
        <div class="stat"><b>Niveau</b><span id="lvl">1</span></div>
        <div class="stat"><b>Exp√©rience</b><span id="xp">0</span></div>
        <div class="divider"></div>
        <div class="title"><h2>√âquipement</h2></div>
        <div class="inv" id="inventory"></div>
        <div class="divider"></div>
        <div class="title"><h2>Actions rapides</h2></div>
        <div class="btn-row">
          <button id="btn-save" class="btn-ghost">üíæ Sauvegarder</button>
          <button id="btn-load" class="btn-ghost">üìÇ Charger</button>
          <button id="btn-reset" class="btn-danger">‚ôªÔ∏è Recommencer</button>
        </div>
      </aside>

      <main class="panel">
        <div class="title"><h2 id="location">Lisi√®re de la for√™t de Mirval</h2><span class="meta" id="day">Jour 1 ‚Äî Aube</span></div>
        <div class="log" id="log"></div>
        <div class="divider"></div>
        <div class="title"><h2>Que fais-tu ?</h2></div>
        <div class="choices" id="choices"></div>
        <div class="footer">
          <div>Conseil : les <span class="highlight">jets de d√©s (1d20)</span> influencent combats, fouilles et √©v√©nements.</div>
          <div id="lastRoll" class="meta"></div>
        </div>
      </main>
    </div>
  </div>

<script>
// --- Wake Lock (anti veille) ---
let wakeLock;
async function keepAwake() {
  try { wakeLock = await navigator.wakeLock.request('screen'); } catch(e) {}
}
document.addEventListener('visibilitychange', () => {
  if (document.visibilityState === 'visible' && 'wakeLock' in navigator) keepAwake();
});
if ('wakeLock' in navigator) keepAwake();

/* =========================
   üß† COEUR DU JEU / SYSTEME
   ========================= */
const rng = (() => {
  const seed = (self.crypto && crypto.getRandomValues) ? (crypto.getRandomValues(new Uint32Array(1))[0] ^ Date.now()) : Date.now();
  let s = seed >>> 0;
  function rand(){ s ^= s << 13; s >>>= 0; s ^= s >> 17; s >>>= 0; s ^= s << 5;  s >>>= 0; return (s >>> 0) / 0xFFFFFFFF; }
  function between(min, max){ return Math.floor(rand()*(max-min+1))+min; }
  return { rand, between, seed };
})();

const ui = {
  log: document.getElementById('log'),
  choices: document.getElementById('choices'),
  hp: document.getElementById('hp'),
  hpmax: document.getElementById('hpmax'),
  hpbar: document.getElementById('hpbar'),
  gold: document.getElementById('gold'),
  lvl: document.getElementById('lvl'),
  xp: document.getElementById('xp'),
  inv: document.getElementById('inventory'),
  loc: document.getElementById('location'),
  day: document.getElementById('day'),
  lastRoll: document.getElementById('lastRoll'),
  seedInfo: document.getElementById('seedInfo'),
};

ui.seedInfo.textContent = `seed ${rng.seed}`;

function write(text, cls="") {
  const p = document.createElement('p');
  if(cls) p.classList.add(cls);
  p.innerHTML = text;
  ui.log.appendChild(p);
  ui.log.scrollTop = ui.log.scrollHeight;
}

function clearChoices(){ ui.choices.innerHTML = ""; }

function addChoice(label, handler, meta=""){
  const btn = document.createElement('button');
  btn.innerHTML = label + (meta ? `<div class="meta">${meta}</div>` : "");
  btn.onclick = handler;
  ui.choices.appendChild(btn);
}

function addPrimaryChoice(label, handler, meta=""){
  const btn = document.createElement('button');
  btn.classList.add('btn-primary');
  btn.innerHTML = label + (meta ? `<div class="meta">${meta}</div>` : "");
  btn.onclick = handler;
  ui.choices.appendChild(btn);
}

function setStats(){
  ui.hp.textContent = state.hp;
  ui.hpmax.textContent = state.hpMax;
  ui.hpbar.style.width = Math.max(0, Math.min(100, Math.round((state.hp/state.hpMax)*100))) + '%';
  ui.gold.textContent = state.gold;
  ui.lvl.textContent = state.level;
  ui.xp.textContent = state.xp;
  ui.inv.innerHTML = "";
  state.inventory.forEach(it=>{
    const d = document.createElement('div');
    d.className="stat";
    d.innerHTML = `<b>${it.name}</b><span>${it.desc}</span>`;
    ui.inv.appendChild(d);
  });
}

function d20(mod=0){
  const roll = rng.between(1,20);
  const total = roll + mod;
  ui.lastRoll.textContent = `Dernier jet: d20(${mod>=0?'+':''}${mod}) ‚Üí ${roll} = ${total}`;
  return {roll, total};
}

function heal(amount){
  state.hp = Math.min(state.hpMax, state.hp + amount);
  setStats();
  write(`Tu r√©cup√®res <b class="good">+${amount} PV</b>.`, "good");
}

function damage(amount, source=""){
  state.hp = Math.max(0, state.hp - amount);
  setStats();
  write(`Tu subis <b class="bad">-${amount} PV</b>${source?` (${source})`:""}.`, "bad");
  if(state.hp<=0){ return gameOver(); }
}

function changeGold(n){
  state.gold = Math.max(0, state.gold + n);
  setStats();
  const cls = n>=0 ? "good" : "bad";
  write(`Or ${n>=0?'+':''}${n} (total: ${state.gold}).`, cls);
}

function gainXP(n){
  state.xp += n;
  write(`XP ${n>=0?'+':''}${n} (total: ${state.xp}).`, "good");
  const need = 20 + (state.level-1)*15;
  if(state.xp >= need){
    state.level++;
    state.xp = 0;
    state.hpMax += 5;
    state.hp = state.hpMax;
    write(`<b>Niveau ${state.level} atteint !</b> PV max +5, PV restaur√©s.`, "good");
    setStats();
  }
}

function addItem(name, desc){
  state.inventory.push({name, desc});
  setStats();
  write(`Tu obtiens : <b>${name}</b> ‚Äî <span class="meta">${desc}</span>`, "good");
}

function hasItem(name){ return state.inventory.some(i=>i.name===name); }

/* =========================
   üéÆ ETAT & SAUVEGARDE
   ========================= */
const initial = () => ({
  name:"Eldarion",
  hp:20, hpMax:20,
  gold:10, level:1, xp:0,
  day:1, time:"Aube",
  location:"Lisi√®re de la for√™t de Mirval",
  inventory:[
    {name:"Vieille √©p√©e", desc:"+1 en attaque"},
    {name:"Petite armure", desc:"+1 en d√©fense"}
  ],
  flags:{},
});

let state = load() || initial();

function save(){
  localStorage.setItem('mirval.save', JSON.stringify(state));
  write("Sauvegarde effectu√©e.", "sys");
}
function load(){
  try{
    const raw = localStorage.getItem('mirval.save');
    if(!raw) return null;
    const obj = JSON.parse(raw);
    return obj && typeof obj==='object' ? obj : null;
  }catch(e){ return null; }
}
function reset(){
  state = initial();
  document.getElementById('log').innerHTML="";
  setup();
  write("Nouvelle aventure !", "sys");
}

/* =========================
   ‚öîÔ∏è COMBAT
   ========================= */
function combat(monster){
  clearChoices();
  ui.loc.textContent = `Combat : ${monster.name}`;
  write(`<b>${monster.name}</b> appara√Æt !`, "warn");

  let mHP = monster.hp;
  function status(){ return `PV monstre: ${mHP}/${monster.hp}`; }

  function turn(){
    setStats();
    clearChoices();
    addPrimaryChoice("Attaquer üó°Ô∏è", ()=>{
      const atkMod = 1 + (hasItem("Vieille √©p√©e")?1:0) + (hasItem("Lame de ch√™ne")?1:0);
      const defMod = (hasItem("Petite armure")?1:0) + (hasItem("Cuir renforc√©")?1:0);
      const {roll: r1, total:t1} = d20(atkMod);
      if(r1===20){
        const dmg = monster.tier + 6;
        write(`Coup critique ! Tu infliges ${dmg} d√©g√¢ts. ${status()}`);
        mHP -= dmg;
      } else if (t1 >= monster.ac){
        const dmg =  rng.between(monster.tier+1, monster.tier+4);
        write(`Tu touches (${t1} ‚â• CA ${monster.ac}) et infliges ${dmg} d√©g√¢ts.`, "good");
        mHP -= dmg;
      } else {
        write(`Tu manques ta cible (${t1} < CA ${monster.ac}).`, "warn");
      }

      if(mHP <= 0){
        write(`<b class="good">${monster.name} est vaincu !</b>`, "good");
        const gold = rng.between(monster.tier, monster.tier*3);
        const xp = rng.between(monster.tier*3, monster.tier*6);
        changeGold(gold);
        gainXP(xp);
        return afterCombat();
      }

      const mRoll = d20(monster.hitMod).total;
      const armor = 10 + defMod + (hasItem("Bouclier en bois")?1:0);
      if(mRoll >= armor){
        const dmg = rng.between(1, 3+monster.tier);
        write(`${monster.name} te touche (${mRoll} ‚â• Armure ${armor}) et inflige ${dmg}.`, "bad");
        damage(dmg, monster.name);
        if(state.hp<=0) return;
      } else {
        write(`${monster.name} rate son attaque (${mRoll} < ${armor}).`);
      }
      turn();
    }, status());

    addChoice("Se d√©fendre üõ°Ô∏è", ()=>{
      const defMod = 2 + (hasItem("Petite armure")?1:0);
      const mRoll = d20(monster.hitMod).total;
      const armor = 12 + defMod;
      if(mRoll >= armor){
        const dmg = Math.max(0, rng.between(1, 3+monster.tier) - 2);
        write(`Tu bloques partiellement, mais prends ${dmg} d√©g√¢ts.`, "warn");
        damage(dmg, monster.name);
        if(state.hp<=0) return;
      } else {
        write(`Tu pares l'attaque ! Aucun d√©g√¢t.`, "good");
      }
      turn();
    });

    addChoice("Tenter de fuir üèÉ", ()=>{
      const {total} = d20();
      if(total >= 14){
        write(`Tu parviens √† fuir le combat.`, "sys");
        afterCombat(true);
      } else {
        write(`√âchec de fuite !`, "bad");
        const dmg = rng.between(1, monster.tier+2);
        damage(dmg, "Riposte");
        if(state.hp>0) turn();
      }
    });
  }

  function afterCombat(fled=false){
    if(!fled && rng.rand() < 0.35){
      const dropRoll = rng.between(1,4);
      if(dropRoll===1 && !hasItem("Lame de ch√™ne")) addItem("Lame de ch√™ne","+1 attaque (bois ancien)");
      else if(dropRoll===2 && !hasItem("Bouclier en bois")) addItem("Bouclier en bois","+1 armure l√©g√®re");
      else if(dropRoll===3 && !hasItem("Potion de soin")) addItem("Potion de soin","Restaure 6-10 PV (utilisable via √©v√®nement)");
      else changeGold(rng.between(3,8));
    }
    explore();
  }

  turn();
}

/* =========================
   üå≤ EXPLORATION & EVENEMENTS
   ========================= */
function setTime(){
  const slots = ["Aube","Matin","Midi","Apr√®s-midi","Cr√©puscule","Nuit"];
  const idx = slots.indexOf(state.time);
  let n = (idx+1) % slots.length;
  if(n===0){ state.day++; }
  state.time = slots[n];
  ui.day.textContent = `Jour ${state.day} ‚Äî ${state.time}`;
}

function explore(){
  setStats();
  ui.loc.textContent = state.location;
  ui.day.textContent = `Jour ${state.day} ‚Äî ${state.time}`;
  clearChoices();

  addPrimaryChoice("Chemin ombrag√© vers le marais", ()=> encounter("marais"));
  addPrimaryChoice("Sentier lumineux dans la clairi√®re", ()=> encounter("clairiere"));
  addPrimaryChoice("Passage rocailleux vers la colline", ()=> encounter("colline"));

  addChoice("Fouiller les environs üîç", searchArea);
  addChoice("Se reposer üí§", rest);
  if(state.inventory.some(i=>i.name==="Potion de soin")) addChoice("Boire une potion üß™", usePotion);

  setTime();
}

function searchArea(){
  clearChoices();
  const {total} = d20( (hasItem("Lame de ch√™ne")?1:0) );
  if(total >= 18){
    write("Recherche exceptionnelle ! Tu d√©niches un petit coffre scell√©.", "good");
    chest();
  } else if(total >= 12){
    write("Tu trouves quelques pi√®ces au sol.", "good");
    changeGold(rng.between(2,6));
  } else if(total >= 8){
    write("Rien d'int√©ressant, mais tu rep√®res des traces r√©centes...");
    if(rng.rand()<0.5) randomEncounter();
  } else {
    write("En fouillant, tu te blesses sur une ronce.", "bad");
    damage( rng.between(1,3), "Ronces" );
  }
  continueBtn();
}

function rest(){
  clearChoices();
  const danger = rng.rand() < 0.35;
  if(danger){
    write("Alors que tu t'assoupis, quelque chose approche...", "warn");
    randomEncounter();
  } else {
    const healAmt = rng.between(3,7);
    heal(healAmt);
  }
  continueBtn();
}

function usePotion(){
  clearChoices();
  const idx = state.inventory.findIndex(i=>i.name==="Potion de soin");
  if(idx>=0){
    state.inventory.splice(idx,1);
    const amt = rng.between(6,10);
    heal(amt);
  } else {
    write("Tu n'as plus de potion.", "warn");
  }
  continueBtn();
}

function chest(){
  const roll = rng.between(1, 100);
  if(roll > 85) { addItem("Cuir renforc√©","+1 armure (souple)"); changeGold( rng.between(5,12) ); }
  else if(roll > 60) { addItem("Potion de soin","Restaure 6-10 PV"); }
  else if(roll > 30) { changeGold( rng.between(7,15) ); }
  else { write("Le coffre √©tait pi√©g√© !", "bad"); damage(rng.between(3,6), "Pi√®ge"); }
}

function randomEncounter(){
  const pool = [
    ()=>combat({name:"Loup affam√©", hp:10, ac:11, hitMod:2, tier:1}),
    ()=>combat({name:"Bandit des fourr√©s", hp:12, ac:12, hitMod:3, tier:2}),
    ()=>eventFairy(),
    ()=>eventTraveller(),
    ()=>eventShrine(),
  ];
  pool[rng.between(0,pool.length-1)]();
}

function encounter(zone){
  state.location =
    zone==="marais"   ? "Marais de Vire-Saule" :
    zone==="clairiere"? "Clairi√®re des Lys" :
                        "Colline de Rocfauve";
  ui.loc.textContent = state.location;

  const r = rng.rand();
  if(zone==="marais"){
    if(r<0.5) combat({name:"Goule des roseaux", hp:13, ac:12, hitMod:3, tier:2});
    else if(r<0.8) eventBog();
    else chest();
  } else if(zone==="clairiere"){
    if(r<0.45) combat({name:"Sanglier irascible", hp:11, ac:11, hitMod:2, tier:1});
    else if(r<0.8) eventTraveller();
    else eventShrine();
  } else if(zone==="colline"){
    if(r<0.5) combat({name:"Harpie du vent", hp:14, ac:13, hitMod:4, tier:2});
    else if(r<0.85) eventHermit();
    else chest();
  }
}

function eventBog(){
  write("Un brouillard √©pais te cerne. Des feux-follets dansent au loin...");
  clearChoices();
  addChoice("Suivre les lueurs", ()=>{
    const {total} = d20();
    if(total>=15){ write("Les lueurs te guident vers un √Ælot s√ªr et un tr√©sor cach√©.", "good"); chest(); }
    else { write("Tu t'enfonces dans la vase !", "bad"); damage(rng.between(2,5),"Vase"); }
    continueBtn();
  });
  addChoice("Ignorer et rebrousser chemin", ()=>{ write("Tu √©vites le danger et √©conomises tes forces."); continueBtn(); });
}

function eventTraveller(){
  write("Un voyageur bless√© te demande de l'aide en √©change d'une r√©compense.");
  clearChoices();
  addChoice("Soigner (pansement improvis√©)", ()=>{
    const {total} = d20();
    if(total>=14){ write("Tu le soignes avec succ√®s. Il te remercie chaleureusement.", "good"); changeGold(rng.between(5,10)); gainXP(5);}
    else { write("Tu fais de ton mieux, mais la blessure est tenace.", "warn"); gainXP(2);}
    continueBtn();
  });
  addChoice("Ignorer", ()=>{ write("Tu poursuis ta route, insensible aux appels.", "warn"); continueBtn(); });
}

function eventShrine(){
  write("Un ancien autel moussu irradie une faible lueur.");
  clearChoices();
  addChoice("Prier", ()=>{
    const r = rng.rand();
    if(r<0.5){ write("Une chaleur bienfaisante te parcourt.", "good"); heal(rng.between(4,8)); }
    else { write("Un courant froid te traverse...", "bad"); damage(rng.between(2,4),"Mauvais pr√©sage"); }
    continueBtn();
  });
  addChoice("D√©sacraliser (risqu√©)", ()=>{
    const {total} = d20(-1);
    if(total>=16){ write("Tu r√©cup√®res des gemmes incrust√©es.", "good"); changeGold(rng.between(8,16)); }
    else { write("Tu d√©clenches une mal√©diction !", "bad"); damage(rng.between(4,7),"Mal√©diction"); }
    continueBtn();
  });
  addChoice("Partir", ()=>{ write("Tu respectes le lieu et repars en silence."); continueBtn(); });
}

function eventHermit(){
  write("Un ermite t'invite √† partager une herbe m√©dicinale.");
  clearChoices();
  addChoice("Accepter la d√©coction", ()=>{
    const r = rng.rand();
    if(r<0.6){ heal(rng.between(4,9)); gainXP(3); }
    else { write("Mauvaise r√©action !", "bad"); damage(rng.between(2,5),"Naus√©e"); }
    continueBtn();
  });
  addChoice("Acheter une breloque (5 or)", ()=>{
    if(state.gold>=5){
      changeGold(-5);
      addItem("Breloque d'ermite","Parfois d√©tourne le mauvais sort (10%)");
      state.flags.charm = 1;
    } else {
      write("Tu n'as pas assez d'or.", "warn");
    }
    continueBtn();
  });
  addChoice("Refuser poliment", ()=>{ write("Tu d√©clines et remercies l'ermite."); continueBtn(); });
}

function eventFairy(){
  write("Une f√©e malicieuse tourne autour de toi.");
  clearChoices();
  addChoice("Demander une b√©n√©diction", ()=>{
    const r = rng.rand();
    if(r<0.5){ write("La f√©e claque des doigts : tu te sens l√©ger.", "good"); gainXP(5); }
    else { write("La f√©e te joue un tour et te d√©robe une pi√®ce.", "warn"); changeGold(-1); }
    continueBtn();
  });
  addChoice("Tenter de l'attraper (risqu√©)", ()=>{
    const {total} = d20();
    if(total>=17){ write("Incroyable ! Elle laisse tomber une poussi√®re f√©erique.", "good"); addItem("Poussi√®re f√©erique","Relance un jet de d√©s (1 fois)."); }
    else { write("Elle ricane et te pince l'oreille.", "bad"); damage(1,"Farce"); }
    continueBtn();
  });
  addChoice("Ignorer", ()=>{ write("Tu l'ignores, elle se lasse vite."); continueBtn(); });
}

function continueBtn(){
  addPrimaryChoice("Continuer", explore);
}

/* =========================
   ‚ò†Ô∏è FIN DE PARTIE
   ========================= */
function gameOver(){
  clearChoices();
  ui.loc.textContent = "Fin de l'aventure";
  write("<b>Tu t'effondres...</b> La for√™t de Mirval se referme sur ton destin.", "bad");
  addPrimaryChoice("Recommencer", reset);
  addChoice("Charger la derni√®re sauvegarde", ()=>{
    const s = load();
    if(s){ state = s; document.getElementById('log').innerHTML=""; setup(); write("Sauvegarde charg√©e.", "sys"); }
    else write("Aucune sauvegarde trouv√©e.", "warn");
  });
  return true;
}

/* =========================
   üß© INIT & HOOKS
   ========================= */
function setup(){
  setStats();
  ui.loc.textContent = state.location;
  ui.day.textContent = `Jour ${state.day} ‚Äî ${state.time}`;
  clearChoices();

  if(document.getElementById('log').childElementCount===0){
    write("Tu es √† la lisi√®re de la for√™t de Mirval. Les l√©gendes parlent de tr√©sors et de dangers.");
    write("Trois chemins s'offrent √† toi...");
  }

  addPrimaryChoice("Chemin ombrag√© ‚Üí Marais", ()=> encounter("marais"), "Dangers insidieux");
  addPrimaryChoice("Sentier lumineux ‚Üí Clairi√®re", ()=> encounter("clairiere"), "Plus serein");
  addPrimaryChoice("Passage rocailleux ‚Üí Colline", ()=> encounter("colline"), "Vents violents");
  addChoice("Fouiller les environs üîç", searchArea);
  addChoice("Se reposer üí§", rest);

  // Chance passive de la breloque d'ermite
  const _damage = damage;
  damage = function(amount, source=""){
    if(state.flags.charm && rng.rand()<0.10){
      write("Ta breloque d√©tourne le mauvais sort !", "good");
      return;
    }
    _damage(amount, source);
  }

  // Boutons syst√®me
  document.getElementById('btn-save').onclick = save;
  document.getElementById('btn-load').onclick = ()=>{
    const s = load(); if(s){ state = s; document.getElementById('log').innerHTML=""; setup(); write("Sauvegarde charg√©e.", "sys"); }
    else write("Aucune sauvegarde trouv√©e.", "warn");
  };
  document.getElementById('btn-reset').onclick = reset;
}

// --- Service Worker registration ---
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('./sw.js');
  });
}

setup();
</script>
</body>
</html>
